%p So it's finally come to this. Having worked through all the basics, it's time to start building actual rails code. Yay! No justification necessary here: get to it.

.page-header
  %h3 The Rails Philosophy
  %p The key to rails' productivity is the concept of "Convention Over Configuration". While there are a thousand tiny decisions to make for any application you build, the rails philosophy is that most of those decisions have "correct" (or nearly always correct) answers. That being the case, we just assume those answers and focus on more important things.

  = resource_block do |e|
    - e.text("RailsConf 2014 Keynote: Ten Years!", 'https://www.youtube.com/watch?v=9naDS3r4MbY', "This talk by Yehuda Katz does a great job of explaining how important this philosophy really is.")

  = exercise_block_for "convention" do |e|
    - e.question "Explain how \"convention over configuration\" allows us to be more productive as a group."

  %p Here's where the rubber meets the road. We're going to build a fully functional rails app. It would be a good idea to look at the resources on the right, but I'm not going to add a lot of context here. Spend some time, make a thing. Don't worry that it isn't perfect, the important thing right now is to focus on where the code belongs in the various parts of a rails app. Oh, also, write tests.

  = exercise_block_for "basic_types" do |e|
    - e.question "Go complete the #{exercise_link 'cyoa'} exercise. It's a big one, but it should give you good practice and a base for the other exercises here."

  %p Of interesting note, one of the many bits of functionality provided by rails is a set of helpers to base ruby. Though you now know ruby, you may not be familiar with these extensions, and they're pretty helpful.

  = resource_block do |e|
    - e.text("Rails Guides - ActiveSupport Core Extensions", 'http://edgeguides.rubyonrails.org/active_support_core_extensions.html', "The Rails Guide has a long list, but check out in particular the date and string extensions, as well as the extensions to All Objects.")

  = exercise_block_for "active_support" do |e|
    - e.question "Do the #{exercise_link 'supportive'} exercise."
    - e.question "Refactor your rails app to make use of ActiveSupport extensions wherever it makes sense."

.page-header
  %h3 Structuring Your App
  %p You've written the app, right on! Now we're going to refine the structure of the code a bit. You may have all the right functionality in place, but if you don't use the idiomatic rails-isms for your code, you run the risk of unintended side effects (and people will dislike you for making code confusing).
  %p First, let's take a look at helper classes. We use helpers to keep our views DRY, and Rails includes helper methods for views like the form helpers already. But you should be using helpers to reduce the complexity of your views as well. Try out a few RailsCasts to get the flavor of the thing:

  = resource_block do |e|
    - e.video("Custom Helper Modules", 'http://railscasts.com/episodes/64-custom-helper-modules', "Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.")
    - e.video("Blocks in Views", 'http://railscasts.com/episodes/40-blocks-in-view', "If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.")
    - e.video("Refactoring Out Helper Objects", 'http://railscasts.com/episodes/101-refactoring-out-helper-object', "If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.")

  = exercise_block_for "helpers" do |e|
    - e.question "Explain how helpers improve the readability and organization of your rails app."
    - e.question "Refactor your rails app to move any complicated logic from views into helpers."

  %p Often, the functionality we need is not suitable for web interfaces. You've surely used generators and other command line functionality before, but it's worth taking a minute to understand why and how we build tasks from the command line.

  = resource_block do |e|
    - e.video("Custom Rake Tasks", 'http://railscasts.com/episodes/66-custom-rake-tasks', "A railscast on building custom rake tasks. A little old but still solid.")
    - e.text("Rake Tutorial", 'http://jasonseifer.com/2010/04/06/rake-tutorial', "This tutorial is pretty sweet too.")

  = exercise_block_for "rake" do |e|
    - e.question "Demonstrate the command to list all the rake tasks, and the one to match a particular set of tasks."
    - e.question "Explain what sorts of tasks (including examples) belong in a rake task."
    - e.question "If you haven't already, add a few rake tasks to your rails app. Jobs that are run on a schedule are a good place to start."

  %p Finally, this should be an easy one.

  = exercise_block_for "test_conventions" do |e|
    - e.question "Presumably you already wrote your app using TDD / BDD, so this should be an easy one. Just make sure you've followed the conventions for Rspec and Cucumber tests in your codebase."
    - e.question "Make sure that you aren't stubbing functionality in your integration tests."
    - e.question "Explain the usage of integration versus unit tests in your Rails app."
    - e.question "There is a default command that is used in normal Rails codebases to run all tests. What is it?"

.page-header
  %h3 Nothing Works the Way You Think it Does
  %p It's a common scene: the code doesn't work. Not only does it not work, but it makes no sense whatsoever that it doesn't work. You've checked the code several times over and it's just not possible that it's broken. But it is.

  = resource_block do |e|
    - e.text("Pry", 'http://pryrepl.org/', "We use a library called pry, which is basically a replacement for irb. You'll want to be familiar with it; it's one of the most important debugging tools we use.")
    - e.video("Pry Screencast", 'http://vimeo.com/26391171', "One of our favorite friends Josh Cheek did a wonderful screencast on the topic.")

  = exercise_block_for "pry" do |e|
    - e.question "If you've got any nagging issues inside your code, now is a great time to debug it using binding.pry."
    - e.question "If not, try using pry to step through a request cycle from the app. Get familiar with breakpoints and stepping through code."
    - e.question "Consider switching your default console command to pry in your project. Change the console default to pry."
    - e.question "Use gist-method to send me a copy of one of your methods."
